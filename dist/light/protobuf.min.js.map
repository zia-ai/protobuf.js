{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","body","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","isUnsigned","type","genValuePartial_toObject","converter","fromObject","mtype","fields","fieldsArray","safeProp","map","fullName","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","_fieldsArray","indexOf","missing","decoder","filter","group","ref","id","keyType","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","ReflectionObject","TypeError","valuesById","create","comments","reserved","constructor","className","Namespace","fromJSON","json","enm","toJSON","add","comment","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","rule","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","get","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","OneOf","MapField","Service","Method","Message","wrappers","Reader","BufferReader","Writer","BufferWriter","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","prev","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","oneof","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skip","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","methodName","lcFirst","isReserved","m","q","s","oneofs","extensions","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","target","bake","o","key","safePropBackslashRe","safePropQuoteRe","ucFirst","str","toUpperCase","camelCaseRe","camelCase","a","decorateRoot","enumerable","decorateEnumIndex","zero","toNumber","zzEncode","zeroHash","from","parseInt","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","stack","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","type_url","substr","Value","valueDef","Struct","NullValue","ListValue","nullValue","NULL_VALUE","numberValue","stringValue","boolValue","listValue","structValue","kind","structDef","forEach","k","Date","seconds","nanos","valueOf","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\n    // \"use strict\" directive so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    // Expose globally\n    var protobuf = global.protobuf = $require(entries[0]);\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(14),\n    util = require(33);\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else {\n            gen\n            // (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            //     (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n        }\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(util.Long)\")\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\n                    (\"m%s=d%s\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    // (\"if(d%s!=null){\", prop); // !== undefined && !== null\n    genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n        // if (!(field.resolvedType instanceof Enum)) gen\n    // (\"}\");\n        }\n    } return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n            (\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen\n        (\"if(util.Long){\")\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n        (\"}else\")\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) gen\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\n            else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    return gen\n    (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n","\"use strict\";\nmodule.exports = decoder;\n\nvar Enum    = require(14),\n    types   = require(32),\n    util    = require(33);\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    (\"if(!(r instanceof Reader))\")\n        (\"r=Reader.create(r)\")\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\n    (\"while(r.pos<c){\")\n        (\"var t=r.uint32()\");\n    if (mtype.group) gen\n        (\"if((t&7)===4)\")\n            (\"break\");\n    gen\n        (\"switch(t>>>3){\");\n\n    var i = 0;\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            ref   = \"m\" + util.safeProp(field.name); gen\n            (\"case %i:\", field.id);\n\n        // Map fields\n        if (field.map) { gen\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\n                (\"if(%s===util.emptyObject)\", ref)\n                    (\"%s={}\", ref)\n                (\"k=r.%s()\", field.keyType)\n                (\"r.pos++\"); // assumes id 2 + value wireType\n            if (types.long[field.keyType] !== undefined) {\n                if (types.basic[type] === undefined) gen\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\n                else gen\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\n            } else {\n                if (types.basic[type] === undefined) gen\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\n                else gen\n                (\"%s[k]=r.%s()\", ref, type);\n            }\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n\n                (\"if(!(%s&&%s.length))\", ref, ref)\n                    (\"%s=[]\", ref);\n\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen\n                (\"if((t&7)===2){\")\n                    (\"var c2=r.uint32()+r.pos\")\n                    (\"while(r.pos<c2)\")\n                        (\"%s.push(r.%s())\", ref, type)\n                (\"}else\");\n\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\n                    ? \"%s.push(types[%i].decode(r))\"\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen\n                    (\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n                ? \"%s=types[%i].decode(r)\"\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen\n                (\"%s=r.%s()\", ref, type);\n        gen\n                (\"break\");\n    // Unknown fields\n    } gen\n            (\"default:\")\n                (\"r.skipType(t&7)\")\n                (\"break\")\n\n        (\"}\")\n    (\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n\n    return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline */\n}\n","\"use strict\";\nmodule.exports = encoder;\n\nvar Enum     = require(14),\n    types    = require(32),\n    util     = require(33);\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n    return field.resolvedType.group\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    (\"if(!w)\")\n        (\"w=Writer.create()\");\n\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n\n    for (var i = 0; i < fields.length; ++i) {\n        var field    = fields[i].resolve(),\n            index    = mtype._fieldsArray.indexOf(field),\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            wireType = types.basic[type];\n            ref      = \"m\" + util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) {\n            gen\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen\n        (\"}\")\n    (\"}\");\n\n            // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) { gen\n\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n        (\"for(var i=0;i<%s.length;++i)\", ref)\n            (\"w.%s(%s[i])\", type, ref)\n        (\"w.ldelim()\");\n\n            // Non-packed\n            } else { gen\n\n        (\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined)\n            genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n            } gen\n    (\"}\");\n\n        // Non-repeated\n        } else {\n            if (field.optional) gen\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\n\n            if (wireType === undefined)\n        genTypePartial(gen, field, index, ref);\n            else gen\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n        }\n    }\n\n    return gen\n    (\"return w\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}","\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(21),\n    util = require(33);\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Enum(name, values, options) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON() {\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n","\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(14),\n    types = require(32),\n    util  = require(33);\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Field(name, id, type, rule, extend, options) {\n\n    if (util.isObject(rule)) {\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON() {\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","\"use strict\";\nvar protobuf = module.exports = require(17);\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(13);\nprotobuf.decoder          = require(12);\nprotobuf.verifier         = require(36);\nprotobuf.converter        = require(11);\n\n// Reflection\nprotobuf.ReflectionObject = require(22);\nprotobuf.Namespace        = require(21);\nprotobuf.Root             = require(26);\nprotobuf.Enum             = require(14);\nprotobuf.Type             = require(31);\nprotobuf.Field            = require(15);\nprotobuf.OneOf            = require(23);\nprotobuf.MapField         = require(18);\nprotobuf.Service          = require(30);\nprotobuf.Method           = require(20);\n\n// Runtime\nprotobuf.Message          = require(19);\nprotobuf.wrappers         = require(37);\n\n// Utility\nprotobuf.types            = require(32);\nprotobuf.util             = require(33);\n\n// Configure reflection\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(38);\nprotobuf.BufferWriter = require(39);\nprotobuf.Reader       = require(24);\nprotobuf.BufferReader = require(25);\n\n// Utility\nprotobuf.util         = require(35);\nprotobuf.rpc          = require(28);\nprotobuf.roots        = require(27);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Configure serialization\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n","\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(15);\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(32),\n    util    = require(33);\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction MapField(name, id, keyType, type, options) {\n    Field.call(this, name, id, type, options);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON() {\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","\"use strict\";\nmodule.exports = Message;\n\nvar util = require(35);\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/","\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(33);\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON() {\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n","\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Enum     = require(14),\n    Field    = require(15),\n    util     = require(33);\n\nvar Type,    // cyclic\n    Service; // \"\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON();\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON() {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum\");\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type\");\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\nNamespace._configure = function(Type_, Service_) {\n    Type    = Type_;\n    Service = Service_;\n};\n","\"use strict\";\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(33);\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n","\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(15),\n    util  = require(33);\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction OneOf(name, fieldNames, options) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON() {\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(35);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            do { // eslint-disable-line no-constant-condition\n                if ((wireType = this.uint32() & 7) === 4)\n                    break;\n                this.skipType(wireType);\n            } while (true);\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(24);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(35);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n","\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(21);\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(15),\n    Enum    = require(14),\n    OneOf   = require(23),\n    util    = require(33);\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Strip path if this file references a bundled definition\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common)\n                filename = altname;\n        }\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            util.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\nRoot._configure = function(Type_, parse_, common_) {\n    Type = Type_;\n    parse = parse_;\n    common = common_;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(29);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(35);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(21);\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(20),\n    util   = require(33),\n    rpc    = require(28);\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON() {\n    var inherited = Namespace.prototype.toJSON.call(this);\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n","\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(21);\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(14),\n    OneOf     = require(23),\n    Field     = require(15),\n    MapField  = require(18),\n    Service   = require(30),\n    Message   = require(19),\n    Reader    = require(24),\n    Writer    = require(38),\n    util      = require(33),\n    encoder   = require(13),\n    decoder   = require(12),\n    verifier  = require(36),\n    converter = require(11),\n    wrappers  = require(37);\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON() {\n    var inherited = Namespace.prototype.toJSON.call(this);\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n","\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(33);\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(35);\n\nvar roots = require(27);\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = require(3);\nutil.fetch   = require(5);\nutil.path    = require(8);\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = require(31);\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = require(14);\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(26))());\n    }\n});\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(35);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(4);\n\n// float handling accross browsers\nutil.float = require(6);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(7);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(10);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(9);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(34);\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(14),\n    util      = require(33);\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}","\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(19);\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n            var type = this.lookup(object[\"@type\"]);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                return this.create({\n                    type_url: \"/\" + type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            object[\"@type\"] = message.$type.fullName;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n\n// Custom wrapper for ListValue\nwrappers[\".google.protobuf.ListValue\"] = {\n    fromObject: function(object) {\n        var Value = this.lookup(\"google.protobuf.Value\");\n        return this.create({values: object.map(Value.fromObject)});\n    },\n\n    toObject: function(message /*, options */) {\n        var Value = this.lookup(\"google.protobuf.Value\");\n        return message.values.map(Value.toObject);\n    }\n};\n\n// Custom wrapper for Value\nwrappers[\".google.protobuf.Value\"] = {\n    // given a plain javascript scalar or object, return a protobuf Value\n    fromObject: function(object) {\n        var Struct = this.lookup(\"google.protobuf.Struct\");\n        var NullValue = this.lookup(\"google.protobuf.NullValue\");\n        var ListValue = this.lookup(\"google.protobuf.ListValue\");\n\n        var valueDef;\n        if (object === null) {\n            valueDef = {nullValue: NullValue.values.NULL_VALUE};\n        } else if (typeof object === \"number\") {\n            valueDef = {numberValue: object};\n        } else if (typeof object === \"string\") {\n            valueDef = {stringValue: object};\n        } else if (typeof object === \"boolean\") {\n            valueDef = {boolValue: object};\n        } else if (Array.isArray(object)) {\n            valueDef = {listValue: ListValue.fromObject(object)};\n        } else if (typeof object === \"object\") {\n            valueDef = {structValue: Struct.fromObject(object)};\n        } else {\n            return valueDef = {nullValue: 0};\n        }\n        return this.create(valueDef);\n    },\n\n    toObject: function(message, options) {\n        var Struct = this.lookup(\"google.protobuf.Struct\");\n        var ListValue = this.lookup(\"google.protobuf.ListValue\");\n\n        var object;\n        if (message.kind === \"nullValue\") {\n            object = null;\n        } else if (message.kind === \"numberValue\") {\n            object = message.numberValue;\n        } else if (message.kind === \"stringValue\") {\n            object = message.stringValue;\n        } else if (message.kind === \"boolValue\") {\n            object = message.boolValue;\n        } else if (message.kind === \"structValue\") {\n            object = Struct.toObject(message.structValue, options);\n        } else if (message.kind === \"listValue\") {\n            object = ListValue.toObject(message.listValue, options);\n        }\n\n        return object;\n    }\n};\n\n// Custom wrapper for Struct\nwrappers[\".google.protobuf.Struct\"] = {\n\n    // given a plain javascript object, return a protobuf Struct object\n    fromObject: function(object) {\n        var Value = this.lookup(\"google.protobuf.Value\");\n        var structDef = {fields: {}};\n\n        Object.keys(object).forEach(function (k) {\n            structDef.fields[k] = Value.fromObject(object[k]);\n        });\n        return this.create(structDef);\n    },\n\n    // given a protobuf Struct object, return a plain JS object\n    toObject: function(message, options) {\n        var Value = this.lookup(\"google.protobuf.Value\");\n        var object = {};\n        var fields = message.fields;\n\n        Object.keys(fields).forEach(function (k) {\n            object[k] = Value.toObject(fields[k], options);\n        });\n        return object;\n    }\n};\n\nwrappers[\".google.protobuf.Timestamp\"] = {\n    \n    // given a protobuf Timestamp object, return a plain JS object\n    fromObject: function(object) {\n        return new Date(object.seconds*1000 + object.nanos/1000);\n    },\n\n    \n    // given a plain javascript object, return a protobuf Timestamp object\n    toObject: function(message, options) {\n        var Timestamp = this.lookup(\"google.protobuf.Timestamp\");\n        \n        return {\n\n            seconds: Math.floor(message.valueOf()/1000),\n            nanos: (message.valueOf() % 1000) * 1000\n        };\n    }\n}\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(35);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(38);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(35);\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n"],"sourceRoot":"."}